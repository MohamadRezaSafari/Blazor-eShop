@inject IDeleteProductUseCase deleteProductUseCase
@inject IUpdateQuantityUseCase updateQuantityUseCase


@if (LineItem != null && LineItem.Product != null)
{
    <li class="row">
        <div class="col">
            <img src="@LineItem.Product.ImageLink" />
        </div>
        <div class="col">
            <h5>@LineItem.Product.Name</h5>
            <div>
                Quantity: &nbsp;&nbsp;
                <input type="number" min="0" value="@LineItem.Quantity" @onchange="HandleQuantityChange" />
            </div>
            <div>
                Price &nbsp;&nbsp; @LineItem.Product.Price.ToString("c")
            </div>
        </div>
        <div class="col">
            <button class="btn btn-light" @onclick="(() => DeleteProduct(LineItem.ProductId))">Delete</button>
        </div>
    </li>
}

@code {

    [Parameter]
    public OrderLineItem LineItem { get; set; }

    [Parameter]
    public EventCallback<Order> OnDeleteProduct { get; set; }

    [Parameter]
    public EventCallback<Order> OnUpdateQuantity { get; set; }


    async void HandleQuantityChange(ChangeEventArgs eventArgs)
    {
        if(eventArgs.Value == null || string.IsNullOrWhiteSpace(eventArgs.Value.ToString())) return;

        int qty = 0;
        if (int.TryParse(eventArgs.Value.ToString(), out qty))
        {
            if (qty < 0)
            {
                return;
            }

            var order = await updateQuantityUseCase.Execute(LineItem.ProductId, qty);
            await OnUpdateQuantity.InvokeAsync(order);
        }
    }

    async void DeleteProduct(int productId)
    {
        var order = await deleteProductUseCase.Execute(productId);
        await OnDeleteProduct.InvokeAsync(order);
    }
}
